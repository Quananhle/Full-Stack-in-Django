CREATE OR REPLACE FUNCTION public.commercial_invoice_detail_fn(transtype character varying, v_shiporderno character varying)
  RETURNS TABLE(rowid integer, r_deliverynum character varying, r_pn character varying, r_hts_code character varying, r_hts_coo character varying, r_desc character varying, r_unit_price_amt numeric, r_qty integer, r_usd_amt numeric)
  LANGUAGE plpgsql
AS $function$
declare
	v_salesorder		VARCHAR(50);
	v_hst_usa			VARCHAR(50);
	v_model_desc		VARCHAR(100);
	v_coo				VARCHAR(10);
	v_unit_price		DECIMAL(15, 2);
	v_shipqty			int;

	r_min 				integer := 0 ; 
	r_max 				integer := 0 ;

	v_tmp_modelid		VARCHAR(50);
	r					record;

BEGIN
    IF transtype IS NULL THEN
        RAISE EXCEPTION 'Transaction type can not be null';
    END IF;
   
   	if transtype = 'DETAIL' then
		DROP TABLE IF EXISTS table_modelid_by_dn;
		CREATE TEMP TABLE table_modelid_by_dn 
		(
		    _rowid              INT GENERATED BY DEFAULT AS IDENTITY,
		    _modelid	        VARCHAR(255) DEFAULT null
		) ON COMMIT DROP;	
	
		DROP TABLE IF EXISTS table_comminvoice_detail;
        CREATE TEMP TABLE table_comminvoice_detail
        (
            t_rowid             INT GENERATED BY DEFAULT AS IDENTITY (START WITH 10 INCREMENT BY 10),
            t_deliverynum		VARCHAR(50)	 DEFAULT NULL,
            t_pn		     	VARCHAR(500) DEFAULT NULL,
            t_hts_code	     	VARCHAR(500) DEFAULT NULL,
            t_coo               VARCHAR(500) DEFAULT NULL,
            t_desc              VARCHAR(500) DEFAULT NULL,
            t_unit_price        numeric DEFAULT NULL,
            t_qty               int DEFAULT NULL,
            t_usd_amt           numeric DEFAULT NULL
        ) ON COMMIT DROP;
       
       	v_coo := 'MX';
       
       	select salesorder_id into v_salesorder
       	from shp_deliverynumberdetail where deliverynumber_id = v_shiporderno;
       
		insert into table_modelid_by_dn (_modelid)
		select distinct(ms.model_id) from mfg_serialnumber ms 
		inner join shp_palletserialnumber b on ms.serial_number = b.serial_number 
		where b.pallet_id in (select pallet_id from shp_palletdeliverynumber sp where deliverynumber_id = v_shiporderno);
	
		select MIN(_rowid) into r_min from table_modelid_by_dn;
		select MAX(_rowid) into r_max from table_modelid_by_dn;
	
		WHILE (r_min <= r_max)
	    loop
	    	select _modelid into v_tmp_modelid from table_modelid_by_dn where _rowid = r_min;
		
			select hst_usa into v_hst_usa from mfg_materialdatarelated where model_id = v_tmp_modelid;
			if v_hst_usa is null then
				v_hst_usa := 'N/A';
			end if;
		
			select model_desc into v_model_desc from mfg_materialmaster where model_id = v_tmp_modelid;
			
			select unit_price into v_unit_price from shp_salesorderdetail where skuno_id = v_tmp_modelid and salesorder_id = v_salesorder; 
		
			select ship_qty into v_shipqty from shp_deliverynumberdetail where skuno_id = v_tmp_modelid and deliverynumber_id = v_shiporderno;
	    	
	    	insert into table_comminvoice_detail (t_deliverynum, t_pn, t_hts_code, t_coo, t_desc, t_unit_price, t_qty, t_usd_amt)
	    	values(v_shiporderno, v_tmp_modelid, v_hst_usa, v_coo, v_model_desc, v_unit_price, v_shipqty, v_shipqty * v_unit_price);
	    	    	
	    	r_min := r_min + 1;
	    end loop;
	   
		RETURN QUERY SELECT * FROM table_comminvoice_detail order by t_rowid; 
		     
   	end if;
   
END; 
$function$
;
